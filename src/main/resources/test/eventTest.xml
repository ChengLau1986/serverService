<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/task
      http://www.springframework.org/schema/task/spring-task.xsd">

    <!--annotation-config注解支持-->
    <!--spring扫描controller之外的注解类，包括service和dao等-->
    <context:component-scan base-package="test.event" annotation-config="true">
    </context:component-scan>

    <!--面向切面编程支持，采用Cglib代理-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--异步消息-->
    <!-- 任务调度器 -->
    <!--<task:scheduler id="scheduler" pool-size="10"/>-->
    <!-- 任务执行器 -->
    <!--<task:executor id="executor" pool-size="10"/>-->
    <!--开启注解调度支持 @Async @Scheduled-->
    <!--<task:annotation-driven  executor="executor" scheduler="scheduler" proxy-target-class="true"/>-->

    <!--<task:executor>配置参数：-->
    <!--id：当配置多个executor时，被@Async("id")指定使用；也被作为线程名的前缀。-->
    <!--pool-size：线程数数-->
    <!--queue-capacity：当最小的线程数已经被占用满后，新的任务会被放进queue里面，当这个 queue的capacity也被占满之后，pool里面会创建新线程处理这个任务，直到总线程数达到了max size，这时系统会拒绝这个任务并抛出TaskRejectedException异常（缺省配置的情况下，可以通过rejection-policy 来决定如何处理这种情况）-->
    <!--keep-alive：超过size的那些线程，任务完成后，再经过这个时长（秒）会被结束掉-->
    <!--rejection-policy：当pool已经达到size的时候，如何处理新任务-->
    <!--ABORT（缺省）：抛出TaskRejectedException异常，然后不执行-->
    <!--DISCARD：不执行，也不抛出异常-->
    <!--DISCARD_OLDEST：丢弃queue中最旧的那个任务-->
    <!--CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行-->
    <task:annotation-driven/>
    <task:executor id="executor" keep-alive="1000" pool-size="20" queue-capacity="20" rejection-policy="ABORT"/>

</beans>