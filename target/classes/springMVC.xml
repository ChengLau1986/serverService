<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
             http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--spirngMVC只扫描controller的注解类，因为springMVC作为spring的子容器，可以调用父容器的service，dao等(动态代理)-->
    <context:component-scan base-package="com.lzapi" annotation-config="true" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 开启aop，对类代理 -->
    <aop:config proxy-target-class="true"> </aop:config>
    <!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
        <!--<property name="securityManager" ref="securityManager" />-->
    <!--</bean>-->

    <!--开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证-->
    <!--配置以下两个bean(DefaultAdvisorAutoProxyCreator(可选)和AuthorizationAttributeSourceAdvisor)即可实现此功能-->
    <!-- 启用shrio授权注解拦截方式 -->

    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>-->

    <!-- 文件上传 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10485760"/> <!-- 10m -->
        <property name="maxInMemorySize" value="4096" />
        <property name="defaultEncoding" value="UTF-8"></property>
    </bean>

    <!--<mvc:interceptors>-->
        <!--&lt;!&ndash; 定义在这里的，所有的都会拦截&ndash;&gt;-->
        <!--<mvc:interceptor>-->
            <!--&lt;!&ndash;manage/a.do  /manage/*&ndash;&gt;-->
            <!--&lt;!&ndash;manage/b.do  /manage/*&ndash;&gt;-->
            <!--&lt;!&ndash;manage/product/save.do /manage/**&ndash;&gt;-->
            <!--&lt;!&ndash;manage/order/detail.do /manage/**&ndash;&gt;-->
            <!--<mvc:mapping path="/user/*"/>-->
            <!--&lt;!&ndash;不拦截登陆请求&ndash;&gt;-->
            <!--<mvc:exclude-mapping path="/user/Login"/>-->
            <!--<bean class="com.lzapi.controller.common.interceptor.AuthorityInterceptor" />-->
        <!--</mvc:interceptor>-->

    <!--</mvc:interceptors>-->

</beans>
